#undef _XOPEN_SOURCE
#undef _POSIX_C_SOURCE
#include "Python.h"

#include "AtomParams.h"
#include "boost_for_export.h"
#include "State.h"
#define ARG_DEFAULT -1

namespace py=boost::python;
using namespace std;




std::vector<std::pair<double, int> > massToNum = {{262.114150 , 105}, {198.968262 , 80}, {41.958618 , 20}, {29.973770 , 14}, {115.904755 , 48}, {155.922120 , 64}, {54.938050 , 25}, {109.905152 , 46}, {238.050783 , 92}, {12.000000 , 6}, {13.000 , 6}, {183.952491 , 76}, {251.079580 , 98}, {144.912569 , 60}, {175.942568 , 70}, {123.905275 , 50}, {137.907107 , 57}, {108.904756 , 47}, {111.904821 , 50}, {121.903047 , 52}, {69.925325 , 30}, {257.095099 , 100}, {81.913485 , 36}, {141.907719 , 60}, {119.902197 , 50}, {129.903508 , 54}, {148.917180 , 62}, {183.950933 , 74}, {78.918338 , 35}, {22.989770 , 11}, {203.973029 , 82}, {83.913425 , 38}, {35.967546 , 18}, {35.453 , 18}, {28.976495 , 14}, {19.992440 , 10}, {33.967867 , 16}, {86.909183 , 37}, {144.912744 , 61}, {103.905430 , 44}, {161.926795 , 66}, {80.916291 , 35}, {200.970285 , 80}, {129.906310 , 56}, {93.906316 , 40}, {86.908879 , 38}, {186.955751 , 75}, {16.999132 , 8}, {73.921178 , 32}, {87.905614 , 38}, {95.907598 , 44}, {237.048167 , 93}, {90.905645 , 40}, {92.906378 , 41}, {188.958145 , 76}, {124.904425 , 52}, {154.922619 , 64}, {152.921226 , 63}, {226.025403 , 88}, {170.936322 , 70}, {207.976636 , 82}, {26.981538 , 13}, {58.933200 , 27}, {163.929197 , 68}, {45.953693 , 20}, {268.138820 , 109}, {122.904273 , 52}, {66.927131 , 30}, {40.961826 , 19}, {191.961479 , 76}, {99.907477 , 42}, {110.904182 , 48}, {113.903358 , 48}, {101.905608 , 46}, {77.920386 , 36}, {31.972071 , 16}, {173.938858 , 70}, {179.946549 , 72}, {134.905683 , 56}, {178.945815 , 72}, {49.947163 , 23}, {147.914818 , 62}, {61.928349 , 28}, {47.952534 , 20}, {112.904061 , 49}, {114.903878 , 49}, {261.108750 , 104}, {73.922477 , 34}, {1.007825 , 1}, {111.902757 , 48}, {193.962664 , 78}, {227.027747 , 89}, {56.935399 , 26}, {59.930791 , 28}, {161.928775 , 68}, {223.019731 , 87}, {49.946050 , 24}, {120.903818 , 51}, {147.916889 , 60}, {125.904269 , 54}, {243.061373 , 95}, {174.940768 , 71}, {95.908276 , 40}, {142.909810 , 60}, {89.904704 , 40}, {62.929601 , 29}, {122.904216 , 51}, {115.901744 , 50}, {91.906810 , 42}, {91.905040 , 40}, {10.012937 , 5}, {123.905896 , 54}, {113.902782 , 50}, {55.934942 , 26}, {155.924278 , 66}, {205.974449 , 82}, {65.926037 , 30}, {39.962591 , 20}, {133.904503 , 56}, {252.082970 , 99}, {11.009305 , 5}, {184.952956 , 75}, {51.940512 , 24}, {231.035879 , 91}, {127.904461 , 52}, {36.965903 , 17}, {77.917310 , 34}, {244.064198 , 94}, {97.905408 , 42}, {67.924848 , 30}, {153.922205 , 62}, {43.955481 , 20}, {23.985042 , 12}, {63.927970 , 28}, {153.920862 , 64}, {103.904035 , 46}, {81.916700 , 34}, {145.913112 , 60}, {232.038050 , 90}, {203.973476 , 80}, {25.982593 , 12}, {187.955836 , 76}, {68.925581 , 31}, {6.015122 , 3}, {39.962383 , 18}, {182.950224 , 74}, {13.003355 , 6}, {82.914136 , 36}, {195.965815 , 80}, {9.012182 , 4}, {137.905241 , 56}, {57.933281 , 26}, {135.904570 , 56}, {157.924101 , 64}, {20.993847 , 10}, {259.101020 , 102}, {172.938207 , 70}, {189.959930 , 78}, {38.963707 , 19}, {96.906021 , 42}, {167.932368 , 68}, {32.971458 , 16}, {84.911789 , 37}, {125.903306 , 52}, {95.904679 , 42}, {112.904401 , 48}, {168.934211 , 69}, {75.921403 , 32}, {45.952630 , 22}, {44.955910 , 21}, {159.925194 , 66}, {139.905434 , 58}, {163.929171 , 66}, {169.934759 , 70}, {177.943698 , 72}, {192.962924 , 77}, {15.000109 , 7}, {63.929147 , 30}, {129.906223 , 52}, {102.905504 , 45}, {175.941402 , 72}, {76.919915 , 34}, {208.980383 , 83}, {149.917271 , 62}, {169.935460 , 68}, {135.907140 , 58}, {197.966752 , 80}, {79.916522 , 34}, {123.902820 , 52}, {71.922076 , 32}, {53.939615 , 26}, {185.954362 , 74}, {50.943964 , 23}, {138.906348 , 57}, {107.904183 , 48}, {35.967081 , 16}, {94.905841 , 42}, {39.963999 , 19}, {37.962732 , 18}, {247.070347 , 96}, {83.911507 , 36}, {131.905056 , 56}, {24.985837 , 12}, {146.914893 , 62}, {202.972329 , 81}, {164.930319 , 67}, {126.904468 , 53}, {181.948206 , 74}, {191.961035 , 78}, {97.907216 , 43}, {47.947947 , 22}, {97.905287 , 44}, {131.904155 , 54}, {156.923957 , 64}, {137.905986 , 58}, {162.928728 , 66}, {197.967876 , 78}, {185.953838 , 76}, {52.940654 , 24}, {179.947466 , 73}, {173.940040 , 72}, {109.903006 , 48}, {18.998403 , 9}, {7.016004 , 3}, {85.909262 , 38}, {27.976927 , 14}, {176.943220 , 72}, {106.905093 , 47}, {101.904349 , 44}, {34.968853 , 17}, {70.924705 , 31}, {201.970626 , 80}, {42.958767 , 20}, {269.134110 , 108}, {104.905084 , 46}, {143.911995 , 62}, {150.919846 , 63}, {53.938885 , 24}, {204.974412 , 81}, {234.040946 , 92}, {199.968309 , 80}, {118.903309 , 50}, {247.070299 , 97}, {100.905582 , 44}, {258.098425 , 101}, {2.014102 , 1}, {264.124730 , 107}, {262.109690 , 103}, {46.951764 , 22}, {107.903894 , 46}, {143.910083 , 60}, {159.927051 , 64}, {151.919788 , 64}, {75.919214 , 34}, {235.043923 , 92}, {149.920887 , 60}, {105.906458 , 48}, {98.905939 , 44}, {160.926930 , 66}, {88.905848 , 39}, {117.901606 , 50}, {99.904220 , 44}, {14.003074 , 7}, {206.975881 , 82}, {69.924250 , 32}, {186.955748 , 76}, {114.903346 , 50}, {132.905447 , 55}, {166.932045 , 68}, {266.121930 , 106}, {4.002603 , 2}, {194.964774 , 78}, {130.905082 , 54}, {30.973762 , 15}, {74.921596 , 33}, {165.930290 , 68}, {79.916378 , 36}, {222.017571 , 86}, {85.910610 , 36}, {190.960591 , 77}, {21.991386 , 10}, {127.903530 , 54}, {135.907220 , 54}, {49.944792 , 22}, {133.905394 , 54}, {15.994915 , 8}, {208.982416 , 84}, {140.907648 , 59}, {128.904779 , 54}, {175.942682 , 71}, {93.905088 , 42}, {158.925343 , 65}, {72.923459 , 32}, {167.933894 , 70}, {196.966552 , 79}, {121.903440 , 50}, {119.904020 , 52}, {209.987131 , 85}, {171.936378 , 70}, {151.919728 , 62}, {179.946706 , 74}, {64.927794 , 29}, {3.016029 , 2}, {17.999160 , 8}, {57.935348 , 28}, {48.947871 , 22}, {180.947996 , 73}, {195.964935 , 78}, {136.905821 , 56}, {60.931060 , 28}, {189.958445 , 76}, {157.924405 , 66}, {105.903483 , 46}, {141.909240 , 58}, {116.902954 , 50}};


int AtomParams::addSpecies(std::string handle, double mass, int atomicNum) {
    //this is wrapped by state b/c fixes may need to update to accomodate more
    //atom types
    if (find(handles.begin(), handles.end(), handle) != handles.end()) {
        return -1;
    }
	handles.push_back(handle);
	int id = numTypes;
	numTypes ++;
	masses.push_back(mass);
    atomicNums.push_back(atomicNum);
	return id;
}


void AtomParams::clear() {
	handles = std::vector<std::string>();
	masses = std::vector<double>();
	numTypes = 0;
}

int AtomParams::typeFromHandle(const std::string &handle) const {
    auto it = find(handles.begin(), handles.end(), handle);
    if (it != handles.end()) {
        return it - handles.begin();
    }
    return -1;
}


void AtomParams::setValues(string handle, double mass, double atomicNum) {
    int idx = typeFromHandle(handle);
    if (mass != ARG_DEFAULT) {
        masses[idx] = mass;
    }
    if (atomicNum != ARG_DEFAULT) {
        atomicNums[idx] = atomicNum;
    }
}




void AtomParams::guessAtomicNumbers() {
    if (state->units.unitType == UNITS::REAL) {
        for (int i=0; i<masses.size(); i++) {
            bool isSet = false;
            for (auto &p : massToNum) {
                if (fabs(p.first-masses[i]) / p.first < 0.01) {
                    atomicNums[i] = p.second;
                    isSet = true;
                    break;
                }
            }
            if (not isSet) {
                std::cout << "Warning: Could not set atomic number for species " << handles[i] << " based on mass " << masses[i] << std::endl;
                atomicNums[i] = -1;
            }
        }
    } 
}


void export_AtomParams() {
    py::class_<AtomParams >(
        "AtomParams"
    )
    .def("addSpecies", &AtomParams::addSpecies,
            (py::arg("handle"),
             py::arg("mass"),
             py::arg("atomicNum")=-1)
        )
    .def("typeFromHandle",  &AtomParams::typeFromHandle,
            (py::arg("handle"))
        )
    .def("setValues", &AtomParams::setValues,
            (py::arg("handle"),
             py::arg("mass")=ARG_DEFAULT,
             py::arg("atomicNum")=ARG_DEFAULT)
        )
    .def_readwrite("masses", &AtomParams::masses)
    .def_readonly("handles", &AtomParams::handles)//! \todo doesn't work
    .def_readonly("numTypes", &AtomParams::numTypes)
    ;
}
